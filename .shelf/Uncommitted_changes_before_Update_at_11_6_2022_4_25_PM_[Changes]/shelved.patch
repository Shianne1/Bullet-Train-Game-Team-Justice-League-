Index: src/Healing.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.util.ArrayList;\r\nimport java.util.Scanner;\r\n\r\n/**\r\n * @Object: Healing()\r\n * @Function: This OOP class will help set up the healing objects that is needed from the item.txt\r\n * when parsing information.\r\n * This class supers back to the item class and then also stores health and stack amount\r\n * @author(s) Dakota Smith\r\n * @added 10/17/2022\r\n */\r\npublic class Healing extends Item implements itemInterface {\r\n    private int healAmount;\r\n    private int stackAmount;\r\n\r\n    // accessing the game console class\r\n    GameConsole game = new GameConsole();\r\n\r\n    private ArrayList<Item> items;\r\n    private ArrayList<Room> roomItems;\r\n    Scanner input;\r\n\r\n    // will access the player's inventory arraylist\r\n    Player inventory;\r\n\r\n    // will access the player's current health\r\n    Player currentHealth;\r\n    Item itemObjectHeal;\r\n    Healing healingItem;\r\n\r\n\r\n    /*---------------------------------------------Healing Constructors-----------------------------------------------*/\r\n    /**\r\n     * @Function: This is a no - arg constructor that will access the item parse method and add the data into\r\n     * their object arraylist\r\n     * @author(s): Shianne Lesure\r\n     * @added: 10/29/2022\r\n     */\r\n    public Healing(){\r\n        // an arraylist that will hold the item's data\r\n        roomItems = new ArrayList();\r\n        items = new ArrayList();\r\n\r\n        // putting the items data into the item & room arraylist\r\n        game.readItems(items, roomItems);\r\n    }\r\n\r\n    /**\r\n     * @param id\r\n     * @param name\r\n     * @param desc\r\n     * @param text\r\n     * @param heal\r\n     * @param stack\r\n     * @Function: constructor for pre existing data from the item text file\r\n     * @author(s) Dakota Smith\r\n     * 10/17/2022\r\n     */\r\n    public Healing(int id, String name, String desc, String text, int heal, int stack) {\r\n        super(id, name, desc, text);\r\n        this.healAmount = heal;\r\n        this.stackAmount = stack;\r\n    }\r\n\r\n\r\n    /*---------------------------------Getters & Setters for Healing variables----------------------------------------*/\r\n    public int getHealAmount() {\r\n        return healAmount;\r\n    }\r\n\r\n    public void setHealAmount(int healAmount) {\r\n        this.healAmount = healAmount;\r\n    }\r\n\r\n    public int getStackAmount() {\r\n        return stackAmount;\r\n    }\r\n\r\n    public void setStackAmount(int stackAmount) {\r\n        this.stackAmount = stackAmount;\r\n    }\r\n\r\n\r\n    /*--------------------------------Healing Methods for implementing the game---------------------------------------*/\r\n    /**\r\n     * @Method: use()\r\n     * @Function: This method will allow the player use an item to heal their wounds and increase their health\r\n     * @author(s): Shianne Lesure\r\n     * @added: 10/29/2022\r\n     */\r\n\r\n    @Override\r\n    public void use() {\r\n        String item = input.nextLine();\r\n        for(Item item1: items){\r\n            itemObjectHeal = item1;\r\n            if(item.contains(super.getItemName())){ // if input contains the item name\r\n                this.setStackAmount(getStackAmount() - 1); // subtract 1 from the healing item stack\r\n\r\n                // add the healing points to the player's current health\r\n                player.setCurrentHealth(this.getHealAmount() + player.getCurrentHealth());\r\n\r\n                // print out to the player how much their current health has went up\r\n                System.out.println(\"You health has jumped up by \" + this.getHealAmount());\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Healing.java b/src/Healing.java
--- a/src/Healing.java	(revision 74305210b529ab74b2903d6ffa5f810a264a5162)
+++ b/src/Healing.java	(date 1667769810686)
@@ -90,7 +90,7 @@
      */
 
     @Override
-    public void use() {
+    public void use(Player player) {
         String item = input.nextLine();
         for(Item item1: items){
             itemObjectHeal = item1;
Index: src/Item.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.io.Serializable;\r\nimport java.util.ArrayList;\r\nimport java.util.Scanner;\r\n\r\n/**\r\n * @Object: item()\r\n * @Function: This OOP class will help set up the item objects that is needed from the item.txt\r\n * when parsing information.\r\n * This class will interact and solve the puzzles to receive items. The puzzle will track\r\n * variables such as item names, item ID, description, text, and the\r\n * command methods for the items as the player interact with them.\r\n * @author(s) Dakota Smith\r\n * @added 10/17/2022\r\n */\r\npublic class Item implements itemInterface, Serializable {\r\n    private int itemId;\r\n    private String itemName;\r\n    private String itemDesc;\r\n    private String itemText;\r\n\r\n    // accessing the game console class\r\n    GameConsole game = new GameConsole();\r\n\r\n    private ArrayList<Item> items;\r\n    private ArrayList<Room> roomItems;\r\n\r\n    // will access the player's inventory arraylist\r\n    private ArrayList<Item> inventory;\r\n\r\n    //Player player = new Player();\r\n\r\n    // will access the room's inventory arraylist\r\n    Room currentRoom;\r\n    Item itemObject;\r\n\r\n    Scanner input;\r\n\r\n\r\n    /*--------------------------------------------Item Constructors---------------------------------------------------*/\r\n    /**\r\n     * @Function: This is a no - arg constructor that will access the item parse method and add the data into\r\n     * their object arraylist\r\n     * @author(s): Shianne Lesure\r\n     * @added: 10/29/2022\r\n     */\r\n    public Item(){\r\n        // an arraylist that will hold the item's data\r\n        roomItems = new ArrayList();\r\n        items = new ArrayList();\r\n\r\n        // putting the items data into the item & room arraylist\r\n        game.readItems(items, roomItems);\r\n        //player.checkInventory();\r\n        inventory = new ArrayList<>();\r\n    }\r\n\r\n    /**\r\n     * @param id\r\n     * @param name\r\n     * @param desc\r\n     * @param text\r\n     * @Function: constructor for pre existing data from the item text file\r\n     * @author(s) Dakota Smith\r\n     * 10/17/2022\r\n     */\r\n    public Item(int id, String name, String desc, String text)\r\n    {\r\n        this.itemId = id;\r\n        this.itemName = name;\r\n        this.itemDesc = desc;\r\n        this.itemText = text;\r\n    }\r\n\r\n\r\n    /*------------------------------------Getters & Setters for Item variables----------------------------------------*/\r\n    public int getItemId() {\r\n        return itemId;\r\n    }\r\n\r\n    public String getItemName() {\r\n        return itemName;\r\n    }\r\n\r\n    public String getItemDesc() {\r\n        return itemDesc;\r\n    }\r\n\r\n    public String getItemText() {\r\n        return itemText;\r\n    }\r\n\r\n\r\n    /*----------------------------------Item Methods for implementing the game----------------------------------------*/\r\n    /**\r\n     * @Method: inspect()\r\n     * @return itemDescription\r\n     * @Function: This method will allow for the player to see the description of the item\r\n     * @author(s): Shianne Lesure\r\n     * @added: 10/29/2022\r\n     */\r\n    @Override\r\n    public String inspect() {\r\n        String item = input.nextLine();\r\n        String itemDescription = \"\";\r\n        for(int i = 0; i < items.size(); i++){\r\n            if(item.contains(items.get(i).getItemName())){ // if player's input contains item's name\r\n                System.out.println(items.get(i).getItemText()); // print out the textual description of the item\r\n                itemDescription = items.get(i).getItemDesc(); // add the description of the item to the string\r\n                break;\r\n            }\r\n        }\r\n        return itemDescription; // return the string\r\n    }\r\n\r\n    @Override\r\n    public void use() {\r\n\r\n    }\r\n\r\n    /**\r\n     * @Method: discardItem()\r\n     * @Function: This method will allow for the player to remove the item from their inventory\r\n     * @author(s): Shianne Lesure\r\n     * @added: 10/29/2022\r\n     */\r\n    @Override\r\n    public void discard() {\r\n        String item = input.nextLine();\r\n        for(Item item1: items){\r\n            itemObject = item1;\r\n            if(item.contains(this.itemName)){\r\n                inventory.remove(itemObject);\r\n                currentRoom.roomItemAdd(itemObject);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @Method: storeItem()\r\n     * @param item\r\n     * @Function: This method will allow the player to take the item and store it within their inventory\r\n     * @author(s): Shianne Lesure\r\n     * @added: 10/29/2022\r\n     */\r\n    public void storeItem(String item){ // store item is the same as pick up item\r\n        for(Item item1: items){\r\n            itemObject = item1;\r\n            if(item.contains(this.itemName)){\r\n                if(item.contains(\"Katana\")){ // if player adds katana to their inventory\r\n                    discard(); // remove knife from inventory\r\n                }\r\n                else if(item.contains(\"medium armor\")){ // if player adds medium armor to their inventory\r\n                    discard(); // remove light armor from inventory\r\n                }\r\n                else if(item.contains(\"heavy armor\")){ // if player add heavy armor to their inventory\r\n                    discard(); // remove medium armor from inventory\r\n                }\r\n                inventory.add(itemObject);\r\n                currentRoom.roomItemRemove(itemObject);\r\n            }\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Item.java b/src/Item.java
--- a/src/Item.java	(revision 74305210b529ab74b2903d6ffa5f810a264a5162)
+++ b/src/Item.java	(date 1667769810679)
@@ -113,7 +113,7 @@
     }
 
     @Override
-    public void use() {
+    public void use(Player player) {
 
     }
 
Index: src/itemInterface.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/**\r\n     @Interface: itemInterface()\r\n     @Function: basic interface used as a template for any similarities between actions that affect items\r\n     @implementedBy: Item, Armor, Weapon\r\n     @author(s) Carlton Napier\r\n     @added 10/16/2022\r\n  */\r\ninterface itemInterface {\r\n    String inspect(); // returns the item's description/item's text\r\n    void use(); // uses the item based on its function\r\n    void discard(); // discards the item\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/itemInterface.java b/src/itemInterface.java
--- a/src/itemInterface.java	(revision 74305210b529ab74b2903d6ffa5f810a264a5162)
+++ b/src/itemInterface.java	(date 1667769931890)
@@ -7,6 +7,6 @@
   */
 interface itemInterface {
     String inspect(); // returns the item's description/item's text
-    void use(); // uses the item based on its function
+    void use(Player player); // uses the item based on its function
     void discard(); // discards the item
 }
Index: src/Weapon.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.util.ArrayList;\r\nimport java.util.Scanner;\r\n\r\npublic class Weapon extends Item implements equipItemInterface, itemInterface {\r\n    private int durability; // the amount of uses the item has\r\n    private int strength; // the amount of damage the weapon deals\r\n\r\n    // accessing the game console class\r\n    GameConsole game = new GameConsole();\r\n\r\n    private ArrayList<Item> items;\r\n    private ArrayList<Room> roomItems;\r\n    Scanner input;\r\n    // will access the player's inventory arraylist\r\n    private ArrayList<Item> inventory;\r\n\r\n    Item itemObjectWeapon;\r\n    Weapon weaponItem;\r\n\r\n    /*--------------------------------------------Weapon Constructors-------------------------------------------------*/\r\n\r\n    /**\r\n     * @Function: This is a no - arg constructor that will access the item parse method and add the data into\r\n     * their object arraylist\r\n     * @author(s): Shianne Lesure\r\n     * @added: 10/29/2022\r\n     */\r\n    public Weapon() {\r\n        // an arraylist that will hold the item's data\r\n        roomItems = new ArrayList();\r\n        items = new ArrayList();\r\n\r\n        // putting the items data into the item & room arraylist\r\n        game.readItems(items, roomItems);\r\n\r\n        inventory = new ArrayList<>();\r\n    }\r\n\r\n    public Weapon(String name, int id, String itemDesc, String itemText, int durability, int strength) {\r\n        super(id, name, itemDesc, itemText);\r\n        this.durability = durability;\r\n        this.strength = strength;\r\n    }\r\n\r\n\r\n    /*------------------------------------Getters & Setters for Weapons-----------------------------------------------*/\r\n    public int getDurability() {\r\n        return durability;\r\n    }\r\n\r\n    public void setDurability(int durability) {\r\n        this.durability = durability;\r\n    }\r\n\r\n    public int getStrength() {\r\n        return strength;\r\n    }\r\n\r\n\r\n    /*---------------------------------Weapon Methods for implementing the game---------------------------------------*/\r\n\r\n    /**\r\n     * @param //item\r\n     * @Method: useItem()\r\n     * @Function: This method will allow the player to use an item to fight a monster\r\n     * @author(s): Shianne Lesure\r\n     * @added: 10/29/2022\r\n     */\r\n    @Override\r\n    public void use() {\r\n        String item = input.nextLine();\r\n        for (Item item1 : items) {\r\n            itemObjectWeapon = item1;\r\n            if (item.contains(super.getItemName())) {\r\n                weaponItem.setDurability(getDurability() - 1);\r\n                System.out.println(\"You inflicted \" + weaponItem.getStrength() + \" damage onto the enemy.\");\r\n                System.out.println(\"You have \" + weaponItem.getDurability() + \" uses left.\");\r\n                if (weaponItem.getDurability() == 0) { // if the weapons uses get to 0\r\n                    System.out.println(\"You can no longer use this weapon\");\r\n                    inventory.remove(itemObjectWeapon); // remove item from player's inventory\r\n                    break;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @param //Player\r\n     * @Method: equip()\r\n     * @Function: This method will equip the item calling the method to the player, while unequipping the player's current item\r\n     * @author(s): Carlton Napier\r\n     * @added: 10/31/2022\r\n     */\r\n    @Override\r\n    public void equip(Player player) {\r\n\r\n\r\n        /*\r\n        if the player has an equipped weapon, the equipped weapon is added to the inventory,\r\n        the weapon trying to be equipped is then set to the player\r\n        the weapon trying to be equipped is then removed from the player's inventory\r\n         */\r\n\r\n        if (player.getEquippedWeapon() != null) {\r\n            player.removeEquippedWeapon();\r\n\r\n        }\r\n\r\n            player.setEquippedWeapon(this);\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Weapon.java b/src/Weapon.java
--- a/src/Weapon.java	(revision 74305210b529ab74b2903d6ffa5f810a264a5162)
+++ b/src/Weapon.java	(date 1667769931897)
@@ -67,7 +67,7 @@
      * @added: 10/29/2022
      */
     @Override
-    public void use() {
+    public void use(Player player) {
         String item = input.nextLine();
         for (Item item1 : items) {
             itemObjectWeapon = item1;
Index: Bullet-Train-Game-Team-Justice-League-.iws
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"8ef12d28-b6a6-4115-8f80-737a24d60c92\" name=\"Changes\" comment=\"Worked on equip() in Armor.java and Weapon.java\">\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/Bullet-Train-Game-Team-Justice-League-/Healing.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/Bullet-Train-Game-Team-Justice-League-/Healing.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/Healing.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/Healing.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Interface\" />\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"master\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"HighlightingSettingsPerFile\">\r\n    <setting file=\"file://$PROJECT_DIR$/src/Armor.java\" root0=\"FORCE_HIGHLIGHTING\" />\r\n    <setting file=\"file://$PROJECT_DIR$/src/GameConsole.java\" root0=\"FORCE_HIGHLIGHTING\" />\r\n    <setting file=\"file://$PROJECT_DIR$/src/GameState.java\" root0=\"FORCE_HIGHLIGHTING\" />\r\n    <setting file=\"file://$PROJECT_DIR$/src/Item.java\" root0=\"FORCE_HIGHLIGHTING\" />\r\n    <setting file=\"file://$PROJECT_DIR$/src/Player.java\" root0=\"FORCE_HIGHLIGHTING\" />\r\n    <setting file=\"file://$PROJECT_DIR$/src/README.txt\" root0=\"FORCE_HIGHLIGHTING\" />\r\n    <setting file=\"file://$PROJECT_DIR$/src/View.java\" root0=\"FORCE_HIGHLIGHTING\" />\r\n    <setting file=\"file://$PROJECT_DIR$/src/Weapon.java\" root0=\"FORCE_HIGHLIGHTING\" />\r\n    <setting file=\"file://$PROJECT_DIR$/src/itemInterface.java\" root0=\"FORCE_HIGHLIGHTING\" />\r\n    <setting file=\"file://$PROJECT_DIR$/src/savedata/real_data.bin\" root0=\"FORCE_HIGHLIGHTING\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2GBVT4nTW7gf3IFefFbU4sDXtbW\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;Downloaded.Files.Path.Enabled&quot;: &quot;false&quot;,\r\n    &quot;Repository.Attach.Annotations&quot;: &quot;false&quot;,\r\n    &quot;Repository.Attach.JavaDocs&quot;: &quot;false&quot;,\r\n    &quot;Repository.Attach.Sources&quot;: &quot;false&quot;,\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/XboxM/Documents/Fall 2022/Advanced Programming (Online)/NapierCarlton_Homework3&quot;,\r\n    &quot;run.code.analysis.last.selected.profile&quot;: &quot;pProject Default&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\XboxM\\Documents\\Fall 2022\\Software Development (Online)\\TeamJusticeLeague_BulletTrainGame\\Bullet-Train-Game-Team-Justice-League-\\src\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"8ef12d28-b6a6-4115-8f80-737a24d60c92\" name=\"Changes\" comment=\"\" />\r\n      <created>1665861970387</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1665861970387</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"missed a small line break when checking stats\">\r\n      <created>1666301039024</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1666301039024</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"missed a small line break when checking stats\">\r\n      <created>1666301266816</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1666301266816</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"missed a small line break\">\r\n      <created>1666301462350</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1666301462350</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"Worked on equip() in Armor.java and Weapon.java\">\r\n      <created>1667761790837</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1667761790837</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"5\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State>\r\n              <option name=\"FILTERS\">\r\n                <map>\r\n                  <entry key=\"branch\">\r\n                    <value>\r\n                      <list>\r\n                        <option value=\"Mark_Branch\" />\r\n                      </list>\r\n                    </value>\r\n                  </entry>\r\n                </map>\r\n              </option>\r\n            </State>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"missed a small line break when checking stats\" />\r\n    <MESSAGE value=\"missed a small line break\" />\r\n    <MESSAGE value=\"Worked on equip() in Armor.java and Weapon.java\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Worked on equip() in Armor.java and Weapon.java\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bullet-Train-Game-Team-Justice-League-.iws b/Bullet-Train-Game-Team-Justice-League-.iws
--- a/Bullet-Train-Game-Team-Justice-League-.iws	(revision 74305210b529ab74b2903d6ffa5f810a264a5162)
+++ b/Bullet-Train-Game-Team-Justice-League-.iws	(date 1667769811117)
@@ -2,8 +2,9 @@
 <project version="4">
   <component name="ChangeListManager">
     <list default="true" id="8ef12d28-b6a6-4115-8f80-737a24d60c92" name="Changes" comment="Worked on equip() in Armor.java and Weapon.java">
-      <change beforePath="$PROJECT_DIR$/out/production/Bullet-Train-Game-Team-Justice-League-/Healing.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/Bullet-Train-Game-Team-Justice-League-/Healing.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Bullet-Train-Game-Team-Justice-League-.iws" beforeDir="false" afterPath="$PROJECT_DIR$/Bullet-Train-Game-Team-Justice-League-.iws" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/Healing.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Healing.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/Item.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Item.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
